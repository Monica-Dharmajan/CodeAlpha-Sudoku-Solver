#include <iostream>
#include <vector>

using namespace std;

// Define grid size
#define N 9

// Function to print the Sudoku grid
void printGrid(int grid[N][N]) {
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++) {
            cout << grid[row][col] << " ";
        }
        cout << endl;
    }
}

// Function to check if num can be placed at grid[row][col]
bool isSafe(int grid[N][N], int row, int col, int num) {
    // Check row
    for (int x = 0; x < N; x++) {
        if (grid[row][x] == num) {
            return false;
        }
    }

    // Check column
    for (int x = 0; x < N; x++) {
        if (grid[x][col] == num) {
            return false;
        }
    }

    // Check 3x3 subgrid
    int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (grid[i + startRow][j + startCol] == num) {
                return false;
            }
        }
    }

    return true;
}

// Backtracking function to solve the Sudoku puzzle
bool solveSudoku(int grid[N][N]) {
    int row, col;
    bool isEmpty = false;

    // Find an empty cell
    for (row = 0; row < N; row++) {
        for (col = 0; col < N; col++) {
            if (grid[row][col] == 0) {
                isEmpty = true;
                break;
            }
        }
        if (isEmpty) break;
    }

    // If no empty cell is found, puzzle is solved
    if (!isEmpty) {
        return true;
    }

    // Try numbers 1 through 9 in the current empty cell
    for (int num = 1; num <= 9; num++) {
        if (isSafe(grid, row, col, num)) {
            grid[row][col] = num;

            // Recursive call to fill the next cell
            if (solveSudoku(grid)) {
                return true;
            }

            // Undo the move (Backtracking)
            grid[row][col] = 0;
        }
    }

    return false;
}

int main() {
    int grid[N][N];

    cout << "Enter the Sudoku puzzle (9x9 grid) row by row.\n";
    cout << "Use 0 for empty cells.\n";

    // Get user input for the Sudoku puzzle
    for (int i = 0; i < N; i++) {
        cout << "Enter row " << i + 1 << " (9 numbers separated by spaces): ";
        for (int j = 0; j < N; j++) {
            cin >> grid[i][j];
        }
    }

    cout << "\nSudoku Puzzle:\n";
    printGrid(grid);

    if (solveSudoku(grid)) {
        cout << "\nSolved Sudoku:\n";
        printGrid(grid);
    } else {
        cout << "\nNo solution exists for the given Sudoku puzzle.\n";
    }

    return 0;
}
